{"version":3,"sources":["Greetings.js","style.js","TextField.js","FirstNameField.js","LastNameField.js","SimpleForm.js","App.js","serviceWorker.js","index.js"],"names":["Greetings","props","react_default","a","createElement","firstName","lastName","style","form","margin","marginLeft","marginRight","padding","width","border","backgroundColor","color","inputGroup","marginBottom","input","error","TextField","_ref","name","onChange","onBlur","label","type","FirstNameField","rest","Object","esm_extends","src_TextField","assign","LastNameField","SimpleForm","state","firstNameError","validateName","test","onFirstNameBlur","_this","setState","onLastNameBlur","lastNameError","onFirstNameChange","event","target","value","onLastNameChange","_this$state","this","src_FirstNameField","src_LastNameField","src_Greetings","React","Component","App","className","src_SimpleForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1bad8bcb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nfunction Greetings(props) {\n  return (\n    <div>\n      Hey you! {props.firstName} {props.lastName}!\n    </div>\n    );\n}\n\nexport default Greetings;\n","// style.js:\nconst style = {\n    form: {\n        margin: 50,\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        padding: 10,\n        width: 300,\n        border: \"1px solid black\",\n        backgroundColor: \"black\",\n        color: \"white\"\n    },\n    inputGroup: {\n        marginBottom: 10\n    },\n    input: {\n        backgroundColor: \"#EFEFFF\",\n        marginLeft: 10\n    },\n    error: {\n        color: \"red\",\n        margin: 5\n    }\n};\n\nexport default style;\n","import React from 'react'\nimport style from \"./style\";\n\n\n\nconst TextField = ({name, onChange, onBlur, error, label}) => (\n    <div style={style.inputGroup}>\n        <label>\n         {label}\n          <input\n           style={style.input}\n           type=\"text\"\n           name={name}\n           onChange={onChange}\n           onBlur={onBlur}\n          />\n          {error && <div style={style.error}>{error}</div>}\n        </label>\n       </div>\n  );\n\nexport default TextField;\n","import React from 'react';\nimport TextField from './TextField';\n\nconst FirstNameField = ({...rest}) => (\n    <TextField name=\"firstName\"\n               label=\"First name:\"\n               {...rest}\n    />\n  );\n\nexport default FirstNameField;\n","import React from 'react';\nimport TextField from './TextField';\n\nconst LastNameField = ({...rest}) => (\n    <TextField name=\"lastName\"\n               label=\"Last name:\"\n               {...rest}\n    />\n  );\n\nexport default LastNameField;\n","import React, { Component } from 'react';\nimport Greetings from './Greetings';\nimport style from './style';\nimport TexField from './TextField';\nimport FirstNameField from './FirstNameField';\nimport LastNameField from './LastNameField';\n\nclass SimpleForm extends React.Component {\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    firstNameError: \"\"\n  };\n\n  validateName = name => {\n    const regex = /[A-Za-z]{3,}/;\n\n    return !regex.test(name)\n      ? \"The name must contain at least three letters. Numbers and special characters are not allowed.\"\n      : \"\";\n  };\n\n  onFirstNameBlur = () => {\n    const { firstName } = this.state;\n\n    const firstNameError = this.validateName( firstName );\n\n    return this.setState({ firstNameError });\n  };\n\n  onLastNameBlur = () => {\n    const { lastName } = this.state;\n\n    const lastNameError = this.validateName( lastName );\n\n    return this.setState({ lastNameError });\n  };\n\n  onFirstNameChange = event =>\n    this.setState({\n      firstName: event.target.value\n    });\n\n  onLastNameChange = event =>\n    this.setState({\n      lastName: event.target.value\n    });\n\n  render() {\n    const { firstNameError, firstName, lastName, lastNameError } = this.state;\n    return (\n      <div style={style.form}>\n       <FirstNameField onChange={this.onFirstNameChange}\n                       onBlur={this.onFirstNameBlur}\n                       error={firstNameError} />\n       <LastNameField onChange={this.onLastNameChange}\n                      onBlur={this.onLastNameBlur}\n                      error={lastNameError} />\n       <div>\n        <Greetings firstName={ firstName } lastName={ lastName } />\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default SimpleForm;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Greetings from './Greetings';\nimport SimpleForm from './SimpleForm';\n\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <div>\n          <SimpleForm />\n        </div>\n        <div>\n          <Greetings firstName=\"Roman\" lastName=\"Lemon\" />\n        </div>\n      </div>\n    );\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}